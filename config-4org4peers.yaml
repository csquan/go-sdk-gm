#
# Copyright SecureKey Technologies Inc. All Rights Reserved.
#
# SPDX-License-Identifier: Apache-2.0
#
#
# The network connection profile provides client applications the information about the target
# blockchain network that are necessary for the applications to interact with it. These are all
# knowledge that must be acquired from out-of-band sources. This file provides such a source.
#

# copied from fabric-sdk-go/test/fixtures/config/config_e2e_pkcs11.yaml

#
# Schema version of the content. Used by the SDK to apply the corresponding parsing rules.
#
version: 1.0.0

#
# The client section used by GO SDK.
#
client:
  # Which organization does this application instance belong to? The value must be the name of an org
  # defined under "organizations"
  organization: Org1
  logging:
    # Develdebug 
    # can using debug to get more information
    #    level: debug
    level: info
  cryptoconfig:
    path: /root/go/src/go-sdk-gm/artifacts/channel2/crypto-config
  # Some SDKs support pluggable KV stores, the properties under "credentialStore"
  # are implementation specific
  credentialStore:
    # [Optional]. Used by user store. Not needed if all credentials are embedded in configuration
    # and enrollments are performed elswhere.
    path: "/tmp/examplestore"
    cryptoStore:
                  # Specific to the underlying KeyValueStore that backs the crypto key store.
      path: "/tmp/hfc-msp"



  tlsCerts:
    # [Optional]. Use system certificate pool when connecting to peers, orderers (for negotiating TLS) Default: false
    systemCertPool: false
    # [Optional]. Client key and cert for TLS handshake with peers and orderers
    #client:
      # 使用byfn中User1@org1的证书
      # keyfile: /home/csquan/work/fabric-samples/balance-transfer/artifacts/channel2/crypto-config/peerOrganizations/org1.example.com/users/Admin@org1.example.com/tls/client.key
      #certfile: /home/csquan/work/fabric-samples/balance-transfer/artifacts/channel2/crypto-config/peerOrganizations/org1.example.com/users/Admin@org1.example.com/tls/client.cert



################################## General part ##################################


#
# [Optional]. But most apps would have this section so that channel objects can be constructed
# based on the content below. If an app is creating channels, then it likely will not need this
# section.
#
channels:
  # name of the channel
  cargochannel:
    # Required. list of orderers designated by the application to use for transactions on this
    # channel. This list can be a result of access control ("org1" can only access "ordererA"), or
    # operational decisions to share loads from applications among the orderers.  The values must
    # be "names" of orgs defined under "organizations/peers"
    # deprecated: not recommended, to override any orderer configuration items, entity matchers should be used.
    #    orderers:
    #      - orderer.example.com

    orderers:
      - orderer.example.com
        #- orderer2.example.com
        #- orderer3.example.com
        #- orderer4.example.com
        #- orderer5.example.com

    # Required. list of peers from participating orgs
    peers:
      peer0.org1.example.com:
        # [Optional]. will this peer be sent transaction proposals for endorsement? The peer must
        # have the chaincode installed. The app can also use this property to decide which peers
        # to send the chaincode install request. Default: true
        endorsingPeer: true

        # [Optional]. will this peer be sent query proposals? The peer must have the chaincode
        # installed. The app can also use this property to decide which peers to send the
        # chaincode install request. Default: true
        chaincodeQuery: true

        # [Optional]. will this peer be sent query proposals that do not require chaincodes, like
        # queryBlock(), queryTransaction(), etc. Default: true
        ledgerQuery: true

        # [Optional]. will this peer be the target of the SDK's listener registration? All peers can
        # produce events but the app typically only needs to connect to one to listen to events.
        # Default: true
        eventSource: true

      # Add other peers in mychannel for byfn
      peer0.org2.example.com:
        endorsingPeer: true
        chaincodeQuery: true
        ledgerQuery: true
        eventSource: true

      peer0.org3.example.com:
        endorsingPeer: true
        chaincodeQuery: true
        ledgerQuery: true
        eventSource: true

      peer0.org4.example.com:
        endorsingPeer: true
        chaincodeQuery: true
        ledgerQuery: true
        eventSource: true

    # [Optional]. The application can use these options to perform channel operations like retrieving channel
    # config etc.
    policies:
      #[Optional] options for retrieving channel configuration blocks
      queryChannelConfig:
        #[Optional] min number of success responses (from targets/peers)
        minResponses: 1
        #[Optional] channel config will be retrieved for these number of random targets
        maxTargets: 1
        #[Optional] retry options for query config block
        retryOpts:
          #[Optional] number of retry attempts
          attempts: 1
          #[Optional] the back off interval for the first retry attempt
          initialBackoff: 500ms
          #[Optional] the maximum back off interval for any retry attempt
          maxBackoff: 5s
          #[Optional] he factor by which the initial back off period is exponentially incremented
          backoffFactor: 2.0

  insurancechannel:
    orderers:
      - orderer.example.com
        #- orderer2.example.com
        #- orderer3.example.com
        #- orderer4.example.com
        #- orderer5.example.com

    # Required. list of peers from participating orgs
    peers:
      peer0.org1.example.com:
        endorsingPeer: true
        chaincodeQuery: true
        ledgerQuery: true
        eventSource: true

      peer0.org2.example.com:
        endorsingPeer: true
        chaincodeQuery: true
        ledgerQuery: true
        eventSource: true

      peer0.org4.example.com:
        endorsingPeer: true
        chaincodeQuery: true
        ledgerQuery: true
        eventSource: true
        
      # [Optional]. The application can use these options to perform channel operations like retrieving channel
    # config etc.
    policies:
      #[Optional] options for retrieving channel configuration blocks
      queryChannelConfig:
        #[Optional] min number of success responses (from targets/peers)
        minResponses: 1
        #[Optional] channel config will be retrieved for these number of random targets
        maxTargets: 1
        #[Optional] retry options for query config block
        retryOpts:
          #[Optional] number of retry attempts
          attempts: 1
          #[Optional] the back off interval for the first retry attempt
          initialBackoff: 500ms
          #[Optional] the maximum back off interval for any retry attempt
          maxBackoff: 5s
          #[Optional] he factor by which the initial back off period is exponentially incremented
          backoffFactor: 2.0
#
# list of participating organizations in this network
#
organizations:
  Org1:
    mspid: Org1MSP
    # set msp files path
    users:
      AdminOrg1:
        key:
          pem: |
            -----BEGIN PRIVATE KEY-----
            MIGTAgEAMBMGByqGSM49AgEGCCqBHM9VAYItBHkwdwIBAQQg2+uQBYO1y31LtsJ2
            byBM9ZUwHqcO2c4Z8h2ljM87Pv2gCgYIKoEcz1UBgi2hRANCAARZXpAL4V6UHyMA
            05Kq8kNyY5hh2FsBXcL8D06p0V/NEFpdiHZfevzDkOQAtWl22yLm7ltH5vW/hnzK
            b8/d1NeR
            -----END PRIVATE KEY-----
        cert:
          pem: |
            -----BEGIN CERTIFICATE-----
            MIICKzCCAdGgAwIBAgIRALa6i62FjbRjw5Zmvg0bh1EwCgYIKoEcz1UBg3UwczEL
            MAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDVNhbiBG
            cmFuY2lzY28xGTAXBgNVBAoTEG9yZzEuZXhhbXBsZS5jb20xHDAaBgNVBAMTE2Nh
            Lm9yZzEuZXhhbXBsZS5jb20wHhcNMjAxMjEwMDIyMTAwWhcNMzAxMjA4MDIyMTAw
            WjBsMQswCQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UEBxMN
            U2FuIEZyYW5jaXNjbzEPMA0GA1UECxMGY2xpZW50MR8wHQYDVQQDDBZBZG1pbkBv
            cmcxLmV4YW1wbGUuY29tMFkwEwYHKoZIzj0CAQYIKoEcz1UBgi0DQgAEWV6QC+Fe
            lB8jANOSqvJDcmOYYdhbAV3C/A9OqdFfzRBaXYh2X3r8w5DkALVpdtsi5u5bR+b1
            v4Z8ym/P3dTXkaNNMEswDgYDVR0PAQH/BAQDAgeAMAwGA1UdEwEB/wQCMAAwKwYD
            VR0jBCQwIoAgumo1DI4QYVhIamqZvPUVaM8ApWIWNKIiBv3Nvs0oqXIwCgYIKoEc
            z1UBg3UDSAAwRQIhAJxwp3pfd21aJXKCwQSFYPzv7XHwlLM9UAVtX/jZQOZ2AiAS
            1dAey9K584q5E2r/Sa//DUoXuEESud7Q15mSv7vhmQ==
            -----END CERTIFICATE-----
                
    cryptoPath: /root/go/src/go-sdk-gm/artifacts/channel2/crypto-config/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp

    # Add peers for org1
    peers:
      - peer0.org1.example.com
    certificateAuthorities:
      - ca-org1

  # the profile will contain public information about organizations other than the one it belongs to.
  # These are necessary information to make transaction lifecycles work, including MSP IDs and
  # peers with a public URL to send transaction proposals. The file will not contain private
  # information reserved for members of the organization, such as admin key and certificate,
  # fabric-ca registrar enroll ID and secret, etc.
  Org2:
    mspid: Org2MSP
    users:
      AdminOrg1:
        key:
          pem: |
            -----BEGIN PRIVATE KEY-----
            MIGTAgEAMBMGByqGSM49AgEGCCqBHM9VAYItBHkwdwIBAQQgC9/c0fhNLZk6WEmB
            hM27S9x0JBcGsPiE26ZIBsdwtRigCgYIKoEcz1UBgi2hRANCAARf5EmDku2HwNy2
            qkRz3Y4kA0bojmZwqbURnAiblrh/LQp6D7Wjun3Nly8zw7GfCAj5C4X6o300YRbi
            YHFrcVr6
            -----END PRIVATE KEY-----
        cert:
          pem: |
            -----BEGIN CERTIFICATE-----
            MIICKjCCAdCgAwIBAgIQSKJ0cuv7n9a63YdNi0jVQzAKBggqgRzPVQGDdTBzMQsw
            CQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UEBxMNU2FuIEZy
            YW5jaXNjbzEZMBcGA1UEChMQb3JnMi5leGFtcGxlLmNvbTEcMBoGA1UEAxMTY2Eu
            b3JnMi5leGFtcGxlLmNvbTAeFw0yMDEyMTAwMjIxMDBaFw0zMDEyMDgwMjIxMDBa
            MGwxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpDYWxpZm9ybmlhMRYwFAYDVQQHEw1T
            YW4gRnJhbmNpc2NvMQ8wDQYDVQQLEwZjbGllbnQxHzAdBgNVBAMMFkFkbWluQG9y
            ZzIuZXhhbXBsZS5jb20wWTATBgcqhkjOPQIBBggqgRzPVQGCLQNCAARf5EmDku2H
            wNy2qkRz3Y4kA0bojmZwqbURnAiblrh/LQp6D7Wjun3Nly8zw7GfCAj5C4X6o300
            YRbiYHFrcVr6o00wSzAOBgNVHQ8BAf8EBAMCB4AwDAYDVR0TAQH/BAIwADArBgNV
            HSMEJDAigCCv6BjBgKB+NB5mCnuBYtGUsM3NSXBJp+5KKhYVWLwa6zAKBggqgRzP
            VQGDdQNIADBFAiEA/kemLQU3q9fcgmGyHR6e5qmTU2x85EPy8Wqa9UKALCACIFqx
            J70BZJ7ttoIB0Ps3X+cSHjsBNQxwRXViBk5CXyWJ
            -----END CERTIFICATE-----

    cryptoPath: /root/go/src/go-sdk-gm/artifacts/channel2/crypto-config/peerOrganizations/org2.example.com/users/Admin@org2.example.com/msp

    # Add peers for org2
    peers:
      - peer0.org2.example.com
    certificateAuthorities:
      - ca-org2
    
  Org3:
    mspid: Org3MSP
    users:
      AdminOrg1:
        key:
          pem: |
            -----BEGIN PRIVATE KEY-----
            MIGTAgEAMBMGByqGSM49AgEGCCqBHM9VAYItBHkwdwIBAQQgxe58o3SETOs9QJFg
            MxA2P+gW4+T96Jx5n2koVoxWem2gCgYIKoEcz1UBgi2hRANCAARjPYmO9kbn+3/e
            6Xd6TLSIkmZ+mr+N5PR61kaqWyhFF4xzi0fQe28mm5sxyRuWXa2iqJ6Y1AuYzFaz
            A3u7+cYe
            -----END PRIVATE KEY-----

        cert:
          pem: |
            -----BEGIN CERTIFICATE-----
            MIICKzCCAdGgAwIBAgIRAK68iJqLMb0emXMpdbhQYZkwCgYIKoEcz1UBg3UwczEL
            MAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDVNhbiBG
            cmFuY2lzY28xGTAXBgNVBAoTEG9yZzMuZXhhbXBsZS5jb20xHDAaBgNVBAMTE2Nh
            Lm9yZzMuZXhhbXBsZS5jb20wHhcNMjAxMjEwMDIyMTAwWhcNMzAxMjA4MDIyMTAw
            WjBsMQswCQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UEBxMN
            U2FuIEZyYW5jaXNjbzEPMA0GA1UECxMGY2xpZW50MR8wHQYDVQQDDBZBZG1pbkBv
            cmczLmV4YW1wbGUuY29tMFkwEwYHKoZIzj0CAQYIKoEcz1UBgi0DQgAEYz2JjvZG
            5/t/3ul3eky0iJJmfpq/jeT0etZGqlsoRReMc4tH0HtvJpubMckbll2toqiemNQL
            mMxWswN7u/nGHqNNMEswDgYDVR0PAQH/BAQDAgeAMAwGA1UdEwEB/wQCMAAwKwYD
            VR0jBCQwIoAgRV7QPhGiu9XPivGfW9THJffNGMBUskGIwVHcsJhiP7IwCgYIKoEc
            z1UBg3UDSAAwRQIgavnUEkO25uSTfJsv9stD852ugyENnOM2xNYhepOhkd0CIQD2
            nwf+b5zFs9JBpaYDxmfff6I2vPTsBaeBP4/e7S5IYg==
            -----END CERTIFICATE-----


    cryptoPath: /root/go/src/go-sdk-gm/artifacts/channel2/crypto-config/peerOrganizations/org3.example.com/users/Admin@org3.example.com/msp

    # Add peers for org3
    peers:
      - peer0.org3.example.com
    certificateAuthorities:
      - ca-org3

  Org4:
    mspid: Org4MSP
    users:
      AdminOrg1:
        key:
          pem: |
            -----BEGIN PRIVATE KEY-----
            MIGTAgEAMBMGByqGSM49AgEGCCqBHM9VAYItBHkwdwIBAQQg/9U5Z9RozW2XgXI7
            wtSPo0JJPKmK7720CXdmRAQgsgKgCgYIKoEcz1UBgi2hRANCAAQCNABoyguyB8FF
            tc3CZDRT54hWHWZoH9xfGKDX5LFWMKD8QJ+AFmM0xjgfLb57TuPgZENk1jV1NnBd
            HBmEcHgW
            -----END PRIVATE KEY-----

        cert:
          pem: |
            -----BEGIN CERTIFICATE-----
            MIICKzCCAdGgAwIBAgIRAIq9naq/40YsDrLCndqj7PQwCgYIKoEcz1UBg3UwczEL
            MAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDVNhbiBG
            cmFuY2lzY28xGTAXBgNVBAoTEG9yZzQuZXhhbXBsZS5jb20xHDAaBgNVBAMTE2Nh
            Lm9yZzQuZXhhbXBsZS5jb20wHhcNMjAxMjEwMDIyMTAwWhcNMzAxMjA4MDIyMTAw
            WjBsMQswCQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UEBxMN
            U2FuIEZyYW5jaXNjbzEPMA0GA1UECxMGY2xpZW50MR8wHQYDVQQDDBZBZG1pbkBv
            cmc0LmV4YW1wbGUuY29tMFkwEwYHKoZIzj0CAQYIKoEcz1UBgi0DQgAEAjQAaMoL
            sgfBRbXNwmQ0U+eIVh1maB/cXxig1+SxVjCg/ECfgBZjNMY4Hy2+e07j4GRDZNY1
            dTZwXRwZhHB4FqNNMEswDgYDVR0PAQH/BAQDAgeAMAwGA1UdEwEB/wQCMAAwKwYD
            VR0jBCQwIoAgwSbXB+vK72LTQHmlP7+8r+4MA20YcNBOTMBvzQwIOr8wCgYIKoEc
            z1UBg3UDSAAwRQIgDmf/zE0WnDOZFdijsHkJ53q6G6mUzqMCaXgLAbx78J0CIQCA
            dmTzsfdxA6mTgdlBBB5fQiYIOwy1SMgmy8iVh5XW+Q==
            -----END CERTIFICATE-----
            


    cryptoPath: /root/go/src/go-sdk-gm/artifacts/channel2/crypto-config/peerOrganizations/org4.example.com/users/Admin@org4.example.com/msp

    # Add peers for org4
    peers:
      - peer0.org4.example.com
    certificateAuthorities:
      - ca-org4

    
  # Orderer Org name
  ordererorg:
    # Membership Service Provider ID for this organization
    mspID: OrdererMSP
    cryptoPath: /root/go/src/go-sdk-gm/artifacts/channel2/crypto-config/ordererOrganizations/example.com/users/Admin@example.com/msp


#
# List of orderers to send transaction and channel create/update requests to. For the time
# being only one orderer is needed. If more than one is defined, which one get used by the
# SDK is implementation specific. Consult each SDK's documentation for its handling of orderers.
#
orderers:
  orderer.example.com:
    # [Optional] Default: Infer from hostname
    url: grpcs://orderer.example.com:7050

    # these are standard properties defined by the gRPC library
    # they will be passed in as-is to gRPC client constructor
    grpcOptions:
      ssl-target-name-override: orderer.example.com
      keep-alive-time: 0s
      keep-alive-timeout: 20s
      keep-alive-permit: false
      fail-fast: false

      #will be taken into consideration if address has no protocol defined, if true then grpc or else grpcs
      allow-insecure: false

    tlsCACerts:
      # Certificate location absolute path
      # Replace to orderer cert path
      path: /root/go/src/go-sdk-gm/artifacts/channel2/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem
  
  orderer2.example.com:
    url: grpcs://orderer2.example.com:8050

    # these are standard properties defined by the gRPC library
    # they will be passed in as-is to gRPC client constructor
    grpcOptions:
      ssl-target-name-override: orderer2.example.com
      # These parameters should be set in coordination with the keepalive policy on the server,
      # as incompatible settings can result in closing of connection.
      # When duration of the 'keep-alive-time' is set to 0 or less the keep alive client parameters are disabled
      keep-alive-time: 0s
      keep-alive-timeout: 20s
      keep-alive-permit: false
      fail-fast: false
      # allow-insecure will be taken into consideration if address has no protocol defined, if true then grpc or else grpcs
      allow-insecure: false

    tlsCACerts:
      # Certificate location absolute path
      path: /root/go/src/go-sdk-gm/artifacts/channel2/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem

  orderer3.example.com:
    url: grpcs://orderer3.example.com:9050

    # these are standard properties defined by the gRPC library
    # they will be passed in as-is to gRPC client constructor
    grpcOptions:
      ssl-target-name-override: orderer3.example.com
      # These parameters should be set in coordination with the keepalive policy on the server,
      # as incompatible settings can result in closing of connection.
      # When duration of the 'keep-alive-time' is set to 0 or less the keep alive client parameters are disabled
      keep-alive-time: 0s
      keep-alive-timeout: 20s
      keep-alive-permit: false
      fail-fast: false
      # allow-insecure will be taken into consideration if address has no protocol defined, if true then grpc or else grpcs
      allow-insecure: false

    tlsCACerts:
      # Certificate location absolute path
       path: /root/go/src/go-sdk-gm/artifacts/channel2/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem
  
  orderer4.example.com:
    grpcs://url: orderer4.example.com:10050

    # these are standard properties defined by the gRPC library
    # they will be passed in as-is to gRPC client constructor
    grpcOptions:
      ssl-target-name-override: orderer4.example.com
      # These parameters should be set in coordination with the keepalive policy on the server,
      # as incompatible settings can result in closing of connection.
      # When duration of the 'keep-alive-time' is set to 0 or less the keep alive client parameters are disabled
      keep-alive-time: 0s
      keep-alive-timeout: 20s
      keep-alive-permit: false
      fail-fast: false
      # allow-insecure will be taken into consideration if address has no protocol defined, if true then grpc or else grpcs
      allow-insecure: false

    tlsCACerts:
      # Certificate location absolute path
       path: /root/go/src/go-sdk-gm/artifacts/channel2/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem
  
  orderer5.example.com:
    url: grpcs://orderer5.example.com:11050

    # these are standard properties defined by the gRPC library
    # they will be passed in as-is to gRPC client constructor
    grpcOptions:
      ssl-target-name-override: orderer5.example.com
      # These parameters should be set in coordination with the keepalive policy on the server,
      # as incompatible settings can result in closing of connection.
      # When duration of the 'keep-alive-time' is set to 0 or less the keep alive client parameters are disabled
      keep-alive-time: 0s
      keep-alive-timeout: 20s
      keep-alive-permit: false
      fail-fast: false
      # allow-insecure will be taken into consideration if address has no protocol defined, if true then grpc or else grpcs
      allow-insecure: false

    tlsCACerts:
      # Certificate location absolute path
       path: /root/go/src/go-sdk-gm/artifacts/channel2/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem

#
# List of peers to send various requests to, including endorsement, query
# and event listener registration.
#
peers:
  peer0.org1.example.com:
    # this URL is used to send endorsement and query requests
    # [Optional] Default: Infer from hostname
    # 表明使用grpcs协议，设置IP和端口号，使用域名会无法连接
    url: grpcs://peer0.org1.example.com:7051
    #url: grpcs://127.0.0.1:7051

    grpcOptions:
      ssl-target-name-override: peer0.org1.example.com
      keep-alive-time: 0s
      keep-alive-timeout: 20s
      keep-alive-permit: false
      fail-fast: false

      #will be taken into consideration if address has no protocol defined, if true then grpc or else grpcs
      allow-insecure: true

    tlsCACerts:
      path: /root/go/src/go-sdk-gm/artifacts/channel2/crypto-config/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt
  peer0.org2.example.com:
    # this URL is used to send endorsement and query requests
    # [Optional] Default: Infer from hostname
    # 表明使用grpcs协议，设置IP和端口号，使用域名会无法连接
    url: grpcs://peer0.org2.example.com:8051
    #url: grpcs://127.0.0.1:8051
    grpcOptions:
      ssl-target-name-override: peer0.org2.example.com
      keep-alive-time: 0s
      keep-alive-timeout: 20s
      keep-alive-permit: false
      fail-fast: false

      #will be taken into consideration if address has no protocol defined, if true then grpc or else grpcs
      allow-insecure: false

    tlsCACerts:
      path: /root/go/src/go-sdk-gm/artifacts/channel2/crypto-config/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt
  peer0.org3.example.com:
    # Replace the port
    url: grpcs://peer0.org3.example.com:9051
    grpcOptions:
      ssl-target-name-override: peer0.org3.example.com
      keep-alive-time: 0s
      keep-alive-timeout: 20s
      keep-alive-permit: false
      fail-fast: false

      #will be taken into consideration if address has no protocol defined, if true then grpc or else grpcs
      allow-insecure: false
    tlsCACerts:
      path: /root/go/src/go-sdk-gm/artifacts/channel2/crypto-config/peerOrganizations/org3.example.com/peers/peer0.org3.example.com/tls/ca.crt
  peer0.org4.example.com:
    # Replace the port
    url: grpcs://peer0.org4.example.com:10051
    grpcOptions:
      ssl-target-name-override: peer0.org4.example.com
      keep-alive-time: 0s
      keep-alive-timeout: 20s
      keep-alive-permit: false
      fail-fast: false

      #will be taken into consideration if address has no protocol defined, if true then grpc or else grpcs
      allow-insecure: false
    tlsCACerts:
      path: /root/go/src/go-sdk-gm/artifacts/channel2/crypto-config/peerOrganizations/org4.example.com/peers/peer0.org4.example.com/tls/ca.crt
      #
# Fabric-CA is a special kind of Certificate Authority provided by Hyperledger Fabric which allows
# certificate management to be done via REST APIs. Application may choose to use a standard
# Certificate Authority instead of Fabric-CA, in which case this section would not be specified.
#
certificateAuthorities:
  ca-org1:
    url: http://ca.org1.example.com:7054
    httpOptions:
      verify: false
    tlsCACerts:
      path: /root/go/src/go-sdk-gm/artifacts/channel2/crypto-config/peerOrganizations/org1.example.com/ca/ca.org1.example.com-cert.pem
    registrar:
      enrollId: admin
      enrollSecret: adminpw
    caName: ca-org1 

  ca-org2:
    url: http://ca.org2.example.com:8054
    httpOptions:
      verify: false
    tlsCACerts:
      path: /root/go/src/go-sdk-gm/artifacts/channel2/crypto-config/peerOrganizations/org2.example.com/ca/ca.org2.example.com-cert.pem
    registrar:
      enrollId: admin
      enrollSecret: adminpw
    caName: ca-org2

  ca-org3:
    url: http://ca.org3.example.com:7054
    httpOptions:
      verify: false
    tlsCACerts:
      path: /root/go/src/go-sdk-gm/artifacts/channel2/crypto-config/peerOrganizations/org3.example.com/ca/ca.org3.example.com-cert.pem
    registrar:
      enrollId: admin
      enrollSecret: adminpw
    caName: ca-org3

  ca-org4:
    url: http://ca.org4.example.com:8054
    httpOptions:
      verify: false
    tlsCACerts:
      path: /root/go/src/go-sdk-gm/artifacts/channel2/crypto-config/peerOrganizations/org4.example.com/ca/ca.org4.example.com-cert.pem
    registrar:
      enrollId: admin
      enrollSecret: adminpw
    caName: ca-org4
    

